namespace BoundedAsync
{
    internal machine Scheduler
    {
        private machine Process1;
        private machine Process2;
        private machine Process3;
        private int Count;

        start state Init
        {
            entry
            {
                Process1 = create(Process);
                Process2 = create(Process);
                Process3 = create(Process);

                send(Process1, eInit, this, Process3, Process2);
                send(Process2, eInit, this, Process3, Process1);
                send(Process3, eInit, this, Process1, Process2);

                Count = 0;

                raise(eUnit);
            }

            on eUnit goto Sync;
        }

        private state Sync
        {
            exit
            {
                send(Process1, eResp);
                send(Process2, eResp);
                send(Process3, eResp);
            }

            on eResp goto Sync;

            on eReq do CountReq;
        }

        private void CountReq()
        {
            this.Count++;

            if (this.Count == 3)
            {
                this.Count = 0;
                raise(eResp);
            }
        }
    }
}
