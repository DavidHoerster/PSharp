namespace FailureDetector
{
    machine Timer
    {
        machine Target;

		private start state Init
        {
            on Unit goto WaitForReq;
			on TimerConfig do Configure;
        }

		private void Configure()
        {
            this.Target = (trigger as TimerConfig).target;
			raise(Unit);
        }

        state WaitForReq
        {
            on Cancel goto WaitForReq with
            {
                send(this.Target, CancelFailure);
            }

            on Start goto WaitForCancel;
        }

        state WaitForCancel
        {
		    ignore Start;

            on Cancel goto WaitForReq with
            {
			    if (*)
				{
				    send(this.Target, CancelSuccess);
				}
				else
				{
				    send(this.Target, CancelFailure);
					send(this.Target, Timeout);
				}
            }

            on default goto WaitForReq with
            {
                send(this.Target, Timeout);
            }
        }
    }
}
