namespace German
{
    internal main machine Host
    {
        private Machine CurrentClient;
        private Tuple<Machine, Machine, Machine> Clients;
        private Machine CurrentCPU;
		private List<Machine> SharerList;

		private bool IsCurrReqExcl;
		private bool IsExclGranted;

		private int S;
		private int I;

        private start state Init
        {
            entry
            {	
			    machine client1 = create Client (this, false);
				machine client2 = create Client (this, false);
				machine client3 = create Client (this, false);

                this.Clients = Tuple.Create(client1, client2, client3);

				this.CurrentClient = null;
				this.CurrentCPU = create CPU (this.Clients);

				this.SharerList = new List<Machine>();
				assert(this.SharerList.Count == 0);

                raise unit;
            }

            on unit goto Receive;
        }
		
        private state Receive
        {
			on req_share goto ShareRequest;
			on req_excl goto ExclRequest;

			defer invalidate_ack;
        }

		private state ShareRequest
        {
            entry
            {
			    CurrentClient = payload as machine;
				IsCurrReqExcl = false;

				raise unit;
            }

			on unit goto ProcessReq;
        }

		private state ExclRequest
        {
            entry
            {
			    CurrentClient = payload as machine;
				IsCurrReqExcl = true;

				raise unit;
            }

			on unit goto ProcessReq;
        }

		private state ProcessReq
        {
            entry
            {
				if (IsCurrReqExcl || IsExclGranted)
			    {
				    raise need_invalidate;
			    }
			    else
				    raise grant;
            }

			on need_invalidate goto Inv;
			on grant goto GrantAccess;
        }

		private state Inv
        {
            entry
            {
			    I = 0;
			    S = SharerList.Count;
			    if (S == 0)
				    raise grant;
			    while (I < S)
			    {
				    send SharerList[I], invalidate;
				    I = I + 1;
			    }
            }

			on invalidate_ack do RecAck;

			on grant goto GrantAccess;

			defer req_share, req_excl;
        }

		private state GrantAccess
        {
            entry
            {
			    if (IsCurrReqExcl)
			    {
				    IsExclGranted = true;
				    send CurrentClient, grant_excl;
			    }
			    else
			    {
				    send CurrentClient, grant_share;
			    }

			    SharerList.Insert(0, CurrentClient);
			    
				raise unit;
            }

			on unit goto Receive;
        }

		action RecAck
		{
		    SharerList.RemoveAt(0);
			S = SharerList.Count;
		    if (S == 0)
			    raise grant;
	    }
    }
}
