using System;

namespace BoundedAsync
{
    internal main machine Scheduler
    {
        private Machine Process1;
        private Machine Process2;
        private Machine Process3;
        private int Count;
        private int DoneCounter;

        private start state Init
        {
            entry
            {
                Process1 = create Process ( this );
                Process2 = create Process ( this );
                Process3 = create Process ( this );

                send eInit ( Process2, Process3 ) to Process1;
                send eInit ( Process1, Process3 ) to Process2;
                send eInit ( Process1, Process2 ) to Process3;

                Count = 0;
                DoneCounter = 3;

                raise eUnit;
            }

            on eUnit goto Sync;

            defer eReq;
        }

        private state Sync
        {
            exit
            {
                send eResp to Process1;
                send eResp to Process2;
                send eResp to Process3;
            }

            on eResp goto Sync;

            on eReq do CountReq;
        }

        private action CountReq
        {
            this.Count++;

            if (this.Count == 3)
            {
                this.Count = 0;
                raise eResp;
            }
        }
    }
}
